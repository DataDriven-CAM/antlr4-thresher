#pragma once
{block_comment}

#include <stdlib.h>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <exception>
#include <string>
#include <locale>
#include <codecvt>
#include <cstring>
#include <cwchar>
#include <functional>

#include "parse/u16ncmp.h"

#include "graph/container/compressed_graph.hpp"
{token_vocab_include}

namespace {namespace} {{

    enum TOKEN {{
        ROOT,
{tokens}
    }};

    enum MODE{{
        DEFAULT,
        Options,
        Tokens,
        Channels
    }};

    struct ast_node{{
      const char16_t* start;
      const char16_t* stop;
      TOKEN token;
      MODE mode=MODE::DEFAULT;
    }};


    using G = graph::container::compressed_graph<int, ast_node>;

    class {class}{{
    protected:
        G dagGraph;
        std::vector<ast_node> vertices;
        std::vector<std::tuple<graph::vertex_id_t<G>, graph::vertex_id_t<G>, int>> edges;
        
        {token_vocab_class} {token_vocab_instance};
    
    public:
        {class}() = default;
        {class}(const {class}& orig) = delete;
        virtual ~{class}() = default;

        //lexer rules
{lexer_rules}

        //parser rules
{parser_rules}

    void operator()(std::u16string& utf16, std::function<void(G& dagGraph)> apply){{
        std::u16string::const_iterator it = utf16.begin();
        vertices.push_back({{.start=&(*it), .stop=&(*it), .token=ROOT}});
        int count=0;
        int depth=0;
        itEnd=utf16.end();
        std::u16string::const_iterator temp=it;
        while(it!=utf16.end()){{
{rules_ladder}
            }}else{{it++;}}
            temp=it;
        }}
            std::sort(edges.begin(), edges.end(), [](std::tuple<graph::vertex_id_t<G>, graph::vertex_id_t<G>, int>& a, std::tuple<graph::vertex_id_t<G>, graph::vertex_id_t<G>, int>& b){{return std::get<0>(a)<std::get<0>(b) || std::get<1>(a)<std::get<1>(b);}});
            using value = std::ranges::range_value_t<decltype(edges)>;
            graph::vertex_id_t<G> N = static_cast<graph::vertex_id_t<G>>(size(graph::vertices(dagGraph)));
            using edge_desc  = graph::edge_info<graph::vertex_id_t<G>, true, void, int>;
            dagGraph.reserve_vertices(vertices.size());
            dagGraph.reserve_edges(edges.size());
            dagGraph.load_edges(edges, [](const value& val) -> edge_desc {{
//                    std::cout<<"edge "<<std::get<0>(val)<<" "<<std::get<1>(val)<<" "<<std::get<2>(val)<<std::endl;
                return edge_desc{{std::get<0>(val), std::get<1>(val), std::get<2>(val)}};
              }}, N);
            dagGraph.load_vertices(vertices, [&](ast_node& nm) {{
                auto uid = static_cast<graph::vertex_id_t<G>>(&nm - vertices.data());
//                std::cout<<"vertex "<<uid<<std::endl;
                return graph::copyable_vertex_t<graph::vertex_id_t<G>, ast_node>{{uid, nm}};
              }});
            apply(dagGraph);
    }};

    
    std::u16string::const_iterator itEnd;
    bool EndOfFile(std::u16string::const_iterator& it){{
        return it==itEnd;
    }};


    }};
}}
