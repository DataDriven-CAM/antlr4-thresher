        std::u16string::const_iterator it = utf16.begin();
        int count=0;
        int depth=0;
        itEnd=utf16.end();
        std::u16string::const_iterator temp=it;
        vertices.push_back({{.start=&(*it), .stop=&(*it), .token={default_token}}});
{rules_ladder}
            std::sort(edges.begin(), edges.end(), [](std::tuple<graph::vertex_id_t<G>, graph::vertex_id_t<G>, int>& a, std::tuple<graph::vertex_id_t<G>, graph::vertex_id_t<G>, int>& b){{return std::get<0>(a)<std::get<0>(b) || std::get<1>(a)<std::get<1>(b);}});
            using value = std::ranges::range_value_t<decltype(edges)>;
            graph::vertex_id_t<G> N = static_cast<graph::vertex_id_t<G>>(size(graph::vertices(dagGraph)));
            using edge_desc  = graph::edge_info<graph::vertex_id_t<G>, true, void, int>;
            dagGraph.reserve_vertices(vertices.size());
            dagGraph.reserve_edges(edges.size());
            dagGraph.load_edges(edges, [](const value& val) -> edge_desc {{
//                    std::cout<<"edge "<<std::get<0>(val)<<" "<<std::get<1>(val)<<" "<<std::get<2>(val)<<std::endl;
                return edge_desc{{std::get<0>(val), std::get<1>(val), std::get<2>(val)}};
              }}, N);
            dagGraph.load_vertices(vertices, [&](ast_node& nm) {{
                auto uid = static_cast<graph::vertex_id_t<G>>(&nm - vertices.data());
//                std::cout<<"vertex "<<uid<<std::endl;
                return graph::copyable_vertex_t<graph::vertex_id_t<G>, ast_node>{{uid, nm}};
              }});
            apply(dagGraph);

