#pragma once
// generated by cantlrtool https://github.com/DataDriven-CAM/antlr4-thresher.git

{block_comment}

#include <stdlib.h>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <exception>
#include <string>
#include <iterator>
#include <locale>
#include <codecvt>
#include <cstring>
#include <cwchar>
#include <functional>

#include "parse/u16ncmp.h"

#include "graph/container/compressed_graph.hpp"
{token_vocab_include}

namespace {namespace} {{

    enum PARSER_TOKEN {{
{tokens}
    }};

    struct parser_node{{
      PARSER_TOKEN parser_token;
      LEXER_TOKEN token;
      size_t id;
      MODE mode=MODE::DEFAULT;
    }};


    using PG = graph::container::compressed_graph<int, parser_node>;

    class {class}{{
    protected:
        PG dagGraph;
        std::vector<parser_node> vertices;
        std::vector<std::tuple<graph::vertex_id_t<PG>, graph::vertex_id_t<PG>, int>> edges;
        
        {token_vocab_class} {token_vocab_instance};
    
    public:
        {class}() = default;
        {class}(const {class}& orig) = delete;
        virtual ~{class}() = default;

        //lexer rules
{lexer_rules}

        //parser rules
{parser_rules}

    void operator()(std::u16string& utf16, std::function<void(PG& dagGraph)> apply){{
        std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> cv;
        vertices.push_back({{.parser_token=PARSER_ROOT, .token=LEXER_ROOT, .id=0}});
        {token_vocab_instance}(utf16, [&](sylvanmats::antlr4::parse::LG& ldagGraph){{
int     status;
        std::cout<<"ldagGraph "<<graph::num_vertices(ldagGraph)<<" "<<graph::num_edges(ldagGraph)<<std::endl;
        std::u16string::const_iterator it = utf16.begin();
        auto& source=ldagGraph[0];
        for (auto&& oe : graph::edges(ldagGraph, source)){{
            graph::container::csr_row<unsigned int>& o=ldagGraph[graph::target_id(ldagGraph, oe)];
            std::cout<<tex(ldagGraph, o)<<std::endl;
        }}
{rules_ladder}
        std::cout<<"vertices "<<vertices.size()<<" "<<edges.size()<<std::endl;
        for(std::vector<parser_node>::iterator it=vertices.begin();it!=vertices.end();it++){{
            auto& nv=graph::vertex_value(ldagGraph, ldagGraph[(*it).id]);
            std::u16string label{{}};
            label.assign(nv.start, nv.stop);
            std::cout<<" "<<(*it).parser_token<<" "<<(*it).token<<" "<<(*it).id<<" "<<(cv.to_bytes(label))<<std::endl;
        }}
            std::sort(edges.begin(), edges.end(), [](std::tuple<graph::vertex_id_t<PG>, graph::vertex_id_t<PG>, int>& a, std::tuple<graph::vertex_id_t<PG>, graph::vertex_id_t<PG>, int>& b){{return std::get<0>(a)<std::get<0>(b) || std::get<1>(a)<std::get<1>(b);}});
            using value = std::ranges::range_value_t<decltype(edges)>;
            graph::vertex_id_t<PG> N = static_cast<graph::vertex_id_t<PG>>(size(graph::vertices(this->dagGraph)));
            using edge_desc  = graph::edge_info<graph::vertex_id_t<PG>, true, void, int>;
            this->dagGraph.reserve_vertices(vertices.size());
            this->dagGraph.reserve_edges(edges.size());
            this->dagGraph.load_edges(edges, [](const value& val) -> edge_desc {{
//                    std::cout<<"edge "<<std::get<0>(val)<<" "<<std::get<1>(val)<<" "<<std::get<2>(val)<<std::endl;
                return edge_desc{{std::get<0>(val), std::get<1>(val), std::get<2>(val)}};
              }}, N);
            this->dagGraph.load_vertices(vertices, [&](parser_node& nm) {{
                auto uid = static_cast<graph::vertex_id_t<PG>>(&nm - vertices.data());
//                std::cout<<"vertex "<<uid<<std::endl;
                return graph::copyable_vertex_t<graph::vertex_id_t<PG>, parser_node>{{uid, nm}};
              }});
        apply(this->dagGraph);
        }});
    }};

    
    std::u16string::const_iterator itEnd;
    bool EndOfFile(std::u16string::const_iterator& it){{
        return it==itEnd;
    }};


    }};
}}
