#pragma once
// generated by cantlrtool https://github.com/DataDriven-CAM/antlr4-thresher.git

{block_comment}

#include <stdlib.h>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <exception>
#include <string>
#include <iterator>
#include <locale>
#include <codecvt>
#include <cstring>
#include <cwchar>
#include <functional>

#include "parse/u16ncmp.h"

#include "graph/container/compressed_graph.hpp"
{token_vocab_include}

namespace {namespace} {{

    enum LEXER_TOKEN {{
{tokens}
    }};

    enum MODE{{
{modes}
    }};

    struct ast_node{{
      const char16_t* start;
      const char16_t* stop;
      LEXER_TOKEN token;
      MODE mode=MODE::DEFAULT;
    }};


    using LG = graph::container::compressed_graph<int, ast_node>;

    class {class}{{
    protected:
        LG dagGraph;
        std::vector<ast_node> vertices;
        std::vector<std::tuple<graph::vertex_id_t<LG>, graph::vertex_id_t<LG>, int>> edges;
        MODE mode = DEFAULT;
        std::vector<MODE> currentMode{{{{mode}}}};
        
        {token_vocab_class} {token_vocab_instance};
    
    public:
        {class}() = default;
        {class}(const {class}& orig) = delete;
        virtual ~{class}() = default;

        //lexer rules
{lexer_rules}

        //parser rules
{parser_rules}

    void operator()(std::u16string& utf16, std::function<void(LG& dagGraph)> apply){{
        std::u16string::const_iterator it = utf16.begin();
        int count=0;
        int depth=0;
        itEnd=utf16.end();
        std::u16string::const_iterator temp=it;
        vertices.push_back({{.start=&(*it), .stop=&(*it), .token=LEXER_ROOT}});
{rules_ladder}
            std::sort(edges.begin(), edges.end(), [](std::tuple<graph::vertex_id_t<LG>, graph::vertex_id_t<LG>, int>& a, std::tuple<graph::vertex_id_t<LG>, graph::vertex_id_t<LG>, int>& b){{if(std::get<0>(a)!=std::get<0>(b)){{return std::get<0>(a)<std::get<0>(b);}} return std::get<1>(a)<std::get<1>(b);}});
            using value = std::ranges::range_value_t<decltype(edges)>;
            graph::vertex_id_t<LG> N = static_cast<graph::vertex_id_t<LG>>(size(graph::vertices(dagGraph)));
            using edge_desc  = graph::edge_info<graph::vertex_id_t<LG>, true, void, int>;
            dagGraph.reserve_vertices(vertices.size());
            dagGraph.reserve_edges(edges.size());
            dagGraph.load_edges(edges, [](const value& val) -> edge_desc {{
//                    std::cout<<"edge "<<std::get<0>(val)<<" "<<std::get<1>(val)<<" "<<std::get<2>(val)<<std::endl;
                return edge_desc{{std::get<0>(val), std::get<1>(val), std::get<2>(val)}};
              }}, N);
            dagGraph.load_vertices(vertices, [&](ast_node& nm) {{
                auto uid = static_cast<graph::vertex_id_t<LG>>(&nm - vertices.data());
//                std::cout<<"vertex "<<uid<<std::endl;
                return graph::copyable_vertex_t<graph::vertex_id_t<LG>, ast_node>{{uid, nm}};
              }});
            apply(dagGraph);
    }};

    void pushMode(MODE mode){{
        currentMode.push_back(mode);
        this->mode=mode;
    }};

    void popMode(){{
        if(currentMode.size()>1){{
            currentMode.pop_back();
            mode=currentMode.back();
        }}
    }};

    std::u16string::const_iterator itEnd;
    bool EndOfFile(std::u16string::const_iterator& it){{
        return it==itEnd;
    }};


    }};
}}
