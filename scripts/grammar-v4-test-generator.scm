#!/usr/bin/guile -s
!#
(use-modules (gnutls))
(use-modules (ice-9 textual-ports))
(use-modules (ice-9 ftw))
(use-modules (ice-9 format))
(gnutls-version)

(define dirPath "../grammars-v4")
(define outPrefixPath "test/include/")
(define grammarDirPath "")
(define examplesDirPath "")
(define parserLength 0)
(define parserSuffix "Parser.h")
(define parserOffset (string-length parserSuffix))

(define suiteContents (call-with-input-file "templates/test/test_suite.txt" get-string-all))
(define contents (call-with-input-file "templates/test/test_case.txt" get-string-all))
(display contents)

(define dir (opendir (string-append outPrefixPath "io/")))
(define dir2 0)
(define dir3 0)
(define casesList (list))
(define n 0)
(do ((entry (readdir dir) (readdir dir)))
  ((eof-object? entry))
    (set! grammarDirPath (string-append outPrefixPath "io/" entry))
;; (display (string-append "grammarDirPath " grammarDirPath))(newline)
    (set! examplesDirPath (string-append dirPath "/" entry "/examples"))
    (if (and (string<> entry ".") (string<> entry "..") (eq? (stat:type  (stat grammarDirPath)) 'directory) (file-exists? examplesDirPath))
        (begin
    (set! dir2 (opendir grammarDirPath))
    (do ((entry2 (readdir dir2) (readdir dir2)))
      ((eof-object? entry2))
      (set! parserLength (- (string-length entry2) parserOffset))
    (if (and (string<> entry2 ".") (string<> entry2 "..") (>= (string-length entry2) parserOffset) (string= (substring entry2 parserLength) parserSuffix))
        (begin
            (set! dir3 (opendir examplesDirPath))
            (set! n 0)
            (do ((entry3 (readdir dir3) (readdir dir3)))
              ((eof-object? entry3))
            (if (and (string<> entry3 ".") (string<> entry3 "..") (< n 1))
                (begin
                    (let ((n3 (- (string-length entry2) 2)) )
                    (display (string-append entry " " entry3 " " entry2 " " (string-downcase (substring entry2 0 n3)) " " (substring entry2 0 n3)))(newline)
                    (set! casesList (append! casesList (list format #f contents entry entry3 (substring entry2 0 n3) (string-downcase (substring entry2 0 n3)) (string-downcase (substring entry2 0 n3)))))
;;                    (append! casesList '(entry3))
                    )
                    (set! n (1+ n))
                )
                #f
                )
             )
           (closedir dir3)
        )
        #f
        )
     )
   (closedir dir2)
        )
        #f
    )
 )
(closedir dir)
(display (length casesList))
(define test-code (format #f suiteContents casesList))
(display (string-length test-code))
